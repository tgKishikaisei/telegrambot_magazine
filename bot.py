# bot.py
import os
import json
import asyncio

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.filters import Command

from sqlalchemy import select
from dotenv import load_dotenv

from models import CartItem, User, Product, OrderItem, Order
from database import get_session

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env (TOKEN, ADMIN_ID, –∏ —Ç.–¥.)
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏–∑ data.json
with open("data.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    categories = data["categories"]
    products = data["products"]

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
PROMOCODES = {"SALE10": 0.1, "VIP": 0.2}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (FSM)
class CheckoutState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_promocode = State()
    waiting_for_payment = State()


# --------------------
# –ö–æ–º–∞–Ω–¥–∞ /start, /menu
# --------------------
@router.message(Command(commands=["start", "menu"]))
async def start_menu(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"),
                KeyboardButton(text="üîé –ü–æ–∏—Å–∫")
            ],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ")
            ]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=kb)


# --------------------
# –ö–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥"
# --------------------
@router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: types.Message):
    buttons = []
    for c in categories:
        buttons.append([InlineKeyboardButton(text=c["name"], callback_data=f"cat_{c['id']}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("cat_"))
async def show_products_in_category(callback_query: types.CallbackQuery):
    cat_id = int(callback_query.data.split("_")[1])
    cat_products = [p for p in products if p["category_id"] == cat_id]
    if not cat_products:
        await callback_query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback_query.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for product in cat_products:
        await send_product_card(callback_query.from_user.id, product)
    await callback_query.answer()


async def send_product_card(chat_id, product):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É".
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product['id']}")]
        ]
    )
    text = (
        f"üì¶ {product['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
        f"üìù {product['description']}"
    )
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)


# --------------------
# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
# --------------------
@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    telegram_id = callback_query.from_user.id  # Telegram user_id

    async with get_session() as session:
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º User —Å —Ç–∞–∫–∏–º telegram_id
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            db_user = User(telegram_id=telegram_id)
            session.add(db_user)
            await session.commit()  # –¢–µ–ø–µ—Ä—å db_user.id –∑–∞–ø–æ–ª–Ω–µ–Ω

        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é cart_item
        stmt_cart = select(CartItem).where(
            CartItem.user_id == db_user.id,
            CartItem.product_id == product_id
        )
        result_cart = await session.execute(stmt_cart)
        cart_item = result_cart.scalar_one_or_none()

        if cart_item:
            cart_item.quantity += 1
        else:
            cart_item = CartItem(
                user_id=db_user.id,  # –í cart_items –ø–∏—à–µ–º db_user.id
                product_id=product_id,
                quantity=1
            )
            session.add(cart_item)

        await session.commit()

    await callback_query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


# --------------------
# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
# --------------------
@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await view_cart(message.from_user.id, message)


async def view_cart(telegram_id: int, message_or_callback: types.Message | types.CallbackQuery):
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º db_user
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω (–∫–æ—Ä–∑–∏–Ω—ã –Ω–µ—Ç)
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await message_or_callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –î–æ—Å—Ç–∞—ë–º —Ç–æ–≤–∞—Ä—ã –∏–∑ cart_items + products
        stmt_cart = (
            select(CartItem, Product)
            .join(Product, Product.id == CartItem.product_id)
            .where(CartItem.user_id == db_user.id)
        )
        result_cart = await session.execute(stmt_cart)
        rows = result_cart.all()  # [(CartItem, Product), ...]

        if not rows:
            # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await message_or_callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        for cart_item, product in rows:
            subtotal = product.price * cart_item.quantity
            total += subtotal
            text += f"‚Ä¢ {product.name} √ó {cart_item.quantity} ‚Äî {subtotal} —Ä—É–±.\n"

        text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
                    InlineKeyboardButton(text="üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
                ]
            ]
        )

        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


# --------------------
# –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
# --------------------
@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        # –ò—â–µ–º User
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if db_user:
            stmt_delete = (
                CartItem.__table__
                .delete()
                .where(CartItem.user_id == db_user.id)
            )
            await session.execute(stmt_delete)
            await session.commit()

    await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback_query.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è.")


# --------------------
# –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
# --------------------
@router.callback_query(F.data == "checkout")
async def checkout(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        stmt_cart = select(CartItem).where(CartItem.user_id == db_user.id)
        result_cart = await session.execute(stmt_cart)
        items_in_cart = result_cart.scalars().all()

        if not items_in_cart:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

    await callback_query.answer()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å):")
    await state.set_state(CheckoutState.waiting_for_contact)


# --------------------
# –ö–Ω–æ–ø–∫–∞ "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" (–∑–∞–∫–∞–∑—ã)
# --------------------
@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    telegram_id = message.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        stmt_orders = select(Order).where(Order.user_id == db_user.id)
        result_orders = await session.execute(stmt_orders)
        orders_list = result_orders.scalars().all()

        if not orders_list:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
        for order in orders_list:
            text += f"–ó–∞–∫–∞–∑ #{order.id}: {order.status} –Ω–∞ —Å—É–º–º—É {order.total} —Ä—É–±.\n"

        await message.answer(text)


# --------------------
# –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ"
# --------------------
@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ")
async def info(message: types.Message):
    text = (
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ.\n"
        "‚è≥ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç: +7 999 123-45-67\n"
        "üìß Email: info@shop.com"
    )
    await message.answer(text)


# --------------------
# –ö–Ω–æ–ø–∫–∞ "üîé –ü–æ–∏—Å–∫"
# --------------------
@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def search_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:")


# --------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------
class CheckoutState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_promocode = State()
    waiting_for_payment = State()


@router.message()
async def text_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –ª–∏–±–æ –∫–∞–∫ —á–∞—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –ø–æ–∏—Å–∫.
    """
    current_state = await state.get_state()

    # 1) –ï—Å–ª–∏ –∂–¥—ë–º –∫–æ–Ω—Ç–∞–∫—Ç
    if current_state == CheckoutState.waiting_for_contact.state:
        await state.update_data(contact=message.text)
        await message.answer("–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? –ï—Å–ª–∏ –¥–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ, –∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        await state.set_state(CheckoutState.waiting_for_promocode)
        return

    # 2) –ï—Å–ª–∏ –∂–¥—ë–º –ø—Ä–æ–º–æ–∫–æ–¥
    if current_state == CheckoutState.waiting_for_promocode.state:
        code = message.text.strip().upper()
        discount = 0
        if code in PROMOCODES:
            discount = PROMOCODES[code]
            await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –°–∫–∏–¥–∫–∞ {int(discount * 100)}%.")
        else:
            if code != "–ù–ï–¢":
                await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏.")
        await state.update_data(discount=discount)

        # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
        telegram_id = message.from_user.id
        async with get_session() as session:
            # –ò—â–µ–º db_user
            stmt_user = select(User).where(User.telegram_id == telegram_id)
            result_user = await session.execute(stmt_user)
            db_user = result_user.scalar_one_or_none()
            total = 0
            if db_user:
                stmt_cart = select(CartItem, Product).join(Product, Product.id == CartItem.product_id).where(
                    CartItem.user_id == db_user.id)
                result_cart = await session.execute(stmt_cart)
                rows = result_cart.all()
                for cart_item, product in rows:
                    total += product.price * cart_item.quantity

            if discount > 0:
                total = int(total * (1 - discount))

            await state.update_data(total=total)
            await message.answer(f"–ö –æ–ø–ª–∞—Ç–µ: {total} —Ä—É–±. –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É (—Ñ–∏–∫—Ç–∏–≤–Ω–æ).")
            await state.set_state(CheckoutState.waiting_for_payment)
        return

    # 3) –ï—Å–ª–∏ –∂–¥—ë–º ¬´–æ–ø–ª–∞—Ç—É¬ª (—Ñ–∏–∫—Ç–∏–≤–Ω–æ)
    if current_state == CheckoutState.waiting_for_payment.state:
        data = await state.get_data()
        telegram_id = message.from_user.id

        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        async with get_session() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt_user = select(User).where(User.telegram_id == telegram_id)
            result_user = await session.execute(stmt_user)
            db_user = result_user.scalar_one_or_none()

            if not db_user:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–∏—Ç –∫–æ—Ä–∑–∏–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–∞
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
                await state.clear()
                return

            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            stmt_cart = select(CartItem, Product).join(Product, Product.id == CartItem.product_id).where(
                CartItem.user_id == db_user.id)
            result_cart = await session.execute(stmt_cart)
            rows = result_cart.all()

            if not rows:
                await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ–ª—å–∑—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
                await state.clear()
                return

            # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            order = Order(
                user_id=db_user.id,
                status="–ü—Ä–∏–Ω—è—Ç",
                contact_info=data.get("contact", ""),
                total=data.get("total", 0)
            )
            session.add(order)
            await session.flush()  # –ü–æ–ª—É—á–∏—Ç—å order.id

            # –°–æ–∑–¥–∞—ë–º OrderItem
            for cart_item, product in rows:
                order_item = OrderItem(
                    order_id=order.id,
                    product_id=product.id,
                    quantity=cart_item.quantity,
                    price=product.price
                )
                session.add(order_item)

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É (cart_items)
            stmt_delete = CartItem.__table__.delete().where(CartItem.user_id == db_user.id)
            await session.execute(stmt_delete)
            await session.commit()

            order_id = order.id

        await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
        await state.clear()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–∞ —Å—É–º–º—É {data.get('total', 0)} —Ä—É–±."
        )
        return

    # 4) –ò–Ω–∞—á–µ —ç—Ç–æ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
    query = message.text.strip().lower()
    results = [p for p in products if query in p["name"].lower()]
    if results:
        for product in results:
            await send_product_card(message.chat.id, product)
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# ---------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------
async def main():
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
