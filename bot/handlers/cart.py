from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select
from bot.database.session import get_session
from bot.models import CartItem, User, Product, Order, OrderItem
from bot.handlers.start_menu import start_menu
from bot.bot_instance import bot

# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–∞–π–ª–µ bot/handlers/cart.py –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ (delivery.py)
from aiogram.fsm.state import StatesGroup, State

class CheckoutState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_promocode = State()
    waiting_for_payment = State()
    waiting_for_delivery_option = State()   # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    waiting_for_address = State()           # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    waiting_for_location = State()

router = Router()

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    await view_cart(message.from_user.id, message, page=0)

@router.callback_query(F.data == "choose_delivery")
async def choose_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üö∂ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_self"),
            InlineKeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä–æ–º", callback_data="delivery_courier")
        ],
        [
            InlineKeyboardButton(text="üì¶ –ü–æ—á—Ç–æ–π", callback_data="delivery_post")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state("CheckoutState:waiting_for_delivery_option")
    await callback_query.answer()

@router.callback_query(F.data.in_(["delivery_self", "delivery_courier", "delivery_post"]))
async def process_delivery_option(callback_query: types.CallbackQuery, state: FSMContext):
    option = callback_query.data
    await state.update_data(delivery_option=option)
    if option in ["delivery_courier", "delivery_post"]:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="input_address"),
                InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="input_location")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_delivery")
            ]
        ])
        await callback_query.message.edit_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å?",
            reply_markup=keyboard
        )
    else:
        # –°–∞–º–æ–≤—ã–≤–æ–∑
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å, –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        pickup_address = "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥.1"  # –ø—Ä–∏–º–µ—Ä
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑. –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: {pickup_address}.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
        await state.clear()
    await callback_query.answer()

@router.callback_query(F.data == "input_address")
async def ask_for_text_address(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ —Ç.–ø.):")
    await state.set_state(CheckoutState.waiting_for_address)
    await callback_query.answer()


@router.callback_query(F.data == "input_location")
async def ask_for_location(callback_query: types.CallbackQuery, state: FSMContext):
    location_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ."
    )
    # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "ReplyKeyboardMarkup"
    await callback_query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=location_kb
    )
    await state.set_state(CheckoutState.waiting_for_location)
    await callback_query.answer()


@router.message(F.text & (F.state == CheckoutState.waiting_for_address))
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    await state.update_data(delivery_address=address)
    data = await state.get_data()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –∑–∞–∫–∞–∑
    text = (
        f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_option')}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
    )
    # –£–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫–∏ –∏ –≤–µ—Ä–Ω—ë–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@router.message(StateFilter(CheckoutState.waiting_for_location))
async def process_location(message: types.Message, state: FSMContext):
    if message.content_type == "location":
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ process_location –≤—ã–∑–≤–∞–Ω!")  # <-- –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        location = message.location
        lat = location.latitude
        lon = location.longitude

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(delivery_lat=lat, delivery_lon=lon)

        text = (
            f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (ReplyKeyboardRemove) –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    else:
        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º" + "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="input_address"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_delivery")
            ]
        ])
        await message.answer(
            "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=keyboard
        )




@router.message(StateFilter(CheckoutState.waiting_for_location))
async def process_text_in_location_state(message: types.Message, state: FSMContext):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç, —Ö–æ—Ç—è –±–æ—Ç –∂–¥—ë—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é,
    –º–æ–∂–Ω–æ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤—Å—ë-—Ç–∞–∫–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.")


async def view_cart(telegram_id: int, msg_or_callback: types.Message | types.CallbackQuery, page: int = 0):
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            if isinstance(msg_or_callback, types.Message):
                await msg_or_callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await msg_or_callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        stmt_cart = (
            select(CartItem, Product)
            .join(Product, Product.id == CartItem.product_id)
            .where(CartItem.user_id == db_user.id)
        )
        result_cart = await session.execute(stmt_cart)
        rows = result_cart.all()

        if not rows:
            if isinstance(msg_or_callback, types.Message):
                await msg_or_callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await msg_or_callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        total = 0
        for cart_item, product in rows:
            total += product.price * cart_item.quantity

        items_per_page = 5
        total_items = len(rows)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        start = page * items_per_page
        end = start + items_per_page
        page_rows = rows[start:end]

        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for cart_item, product in page_rows:
            subtotal = product.price * cart_item.quantity
            text += f"‚Ä¢ {product.name} √ó {cart_item.quantity} ‚Äî {subtotal} —Ä—É–±.\n"
        text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
        if total_pages > 1:
            text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}."

        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for cart_item, product in page_rows:
            row = [
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product.id}"),
                InlineKeyboardButton(text="‚ùå", callback_data=f"remove_{product.id}"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product.id}")
            ]
            keyboard.inline_keyboard.append(row)

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        global_buttons = [
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
            InlineKeyboardButton(text="üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
        keyboard.inline_keyboard.append(global_buttons)

        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cart_page_{page - 1}"))
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cart_page_{page + 1}"))
        if pagination_buttons:
            keyboard.inline_keyboard.append(pagination_buttons)
        if isinstance(msg_or_callback, types.Message):
            await msg_or_callback.answer(text, reply_markup=keyboard)
        else:
            await msg_or_callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback_query: types.CallbackQuery):
    print("add_to_cart handler –≤—ã–∑–≤–∞–Ω, –¥–∞–Ω–Ω—ã–µ:", callback_query.data)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    product_id = int(callback_query.data.split("_")[1])
    telegram_id = callback_query.from_user.id

    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            db_user = User(telegram_id=telegram_id)
            session.add(db_user)
            await session.commit()

        stmt_cart = select(CartItem).where(
            CartItem.user_id == db_user.id,
            CartItem.product_id == product_id
        )
        result_cart = await session.execute(stmt_cart)
        cart_item = result_cart.scalar_one_or_none()

        if cart_item:
            cart_item.quantity += 1
        else:
            cart_item = CartItem(user_id=db_user.id, product_id=product_id, quantity=1)
            session.add(cart_item)

        await session.commit()

    await callback_query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)

@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if db_user:
            stmt_delete = CartItem.__table__.delete().where(CartItem.user_id == db_user.id)
            await session.execute(stmt_delete)
            await session.commit()

    await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
    await callback_query.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@router.callback_query(lambda c: c.data and c.data.startswith("increase_"))
async def increase_quantity(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()
        if not db_user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        stmt_cart = select(CartItem).where(
            CartItem.user_id == db_user.id,
            CartItem.product_id == product_id
        )
        result_cart = await session.execute(stmt_cart)
        cart_item = result_cart.scalar_one_or_none()
        if cart_item:
            cart_item.quantity += 1
            await session.commit()
            await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
    await view_cart(telegram_id, callback_query, page=0)

@router.callback_query(lambda c: c.data and c.data.startswith("decrease_"))
async def decrease_quantity(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()
        if not db_user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        stmt_cart = select(CartItem).where(
            CartItem.user_id == db_user.id,
            CartItem.product_id == product_id
        )
        result_cart = await session.execute(stmt_cart)
        cart_item = result_cart.scalar_one_or_none()
        if cart_item:
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                await session.commit()
                await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
            else:
                await session.delete(cart_item)
                await session.commit()
                await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
    await view_cart(telegram_id, callback_query, page=0)

@router.callback_query(lambda c: c.data and c.data.startswith("remove_"))
async def remove_item(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()
        if not db_user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        stmt_cart = select(CartItem).where(
            CartItem.user_id == db_user.id,
            CartItem.product_id == product_id
        )
        result_cart = await session.execute(stmt_cart)
        cart_item = result_cart.scalar_one_or_none()
        if cart_item:
            await session.delete(cart_item)
            await session.commit()
            await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
    await view_cart(telegram_id, callback_query, page=0)

@router.callback_query(lambda c: c.data and c.data.startswith("cart_page_"))
async def paginate_cart(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    telegram_id = callback_query.from_user.id
    await view_cart(telegram_id, callback_query, page)
    await callback_query.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    from bot.handlers.start_menu import start_menu
    await start_menu(callback_query.message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await callback_query.answer()


async def calculate_total(user_id: int, session) -> int:
    """
    –°—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã (–∏–ª–∏ –∑–∞–∫–∞–∑) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    total = 0
    stmt = (
        select(CartItem, Product)
        .join(Product, Product.id == CartItem.product_id)
        .where(CartItem.user_id == user_id)
    )
    result = await session.execute(stmt)
    rows = result.all()
    for cart_item, product in rows:
        total += product.price * cart_item.quantity
    return total


@router.callback_query(F.data == "checkout")
async def checkout(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    async with get_session() as session:
        stmt_user = select(User).where(User.telegram_id == telegram_id)
        result_user = await session.execute(stmt_user)
        db_user = result_user.scalar_one_or_none()

        if not db_user:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        stmt_cart = select(CartItem).where(CartItem.user_id == db_user.id)
        result_cart = await session.execute(stmt_cart)
        items_in_cart = result_cart.scalars().all()

        if not items_in_cart:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        total_value = await calculate_total(db_user.id, session)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
        order = Order(
            user_id=db_user.id,
            status="–ü—Ä–∏–Ω—è—Ç",
            contact_info="",  # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            total=total_value
        )
        session.add(order)
        await session.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å order.id

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        stmt_cart_details = select(CartItem, Product).join(Product, Product.id == CartItem.product_id).where(
            CartItem.user_id == db_user.id
        )
        result_cart_details = await session.execute(stmt_cart_details)
        rows = result_cart_details.all()
        for cart_item, product in rows:
            order_item = OrderItem(
                order_id=order.id,
                product_id=product.id,
                quantity=cart_item.quantity,
                price=product.price
            )
            session.add(order_item)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        stmt_delete = CartItem.__table__.delete().where(CartItem.user_id == db_user.id)
        await session.execute(stmt_delete)
        await session.commit()

        order_id = order.id

    # –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üö∂ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_self"),
            InlineKeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä–æ–º", callback_data="delivery_courier")
        ],
        [
            InlineKeyboardButton(text="üì¶ –ü–æ—á—Ç–æ–π", callback_data="delivery_post")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    await callback_query.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=delivery_keyboard
    )
    await state.set_state("CheckoutState:waiting_for_delivery_option")
    await callback_query.answer()

